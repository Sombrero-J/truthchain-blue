export namespace User{
    export type user = {
        userAddress:address,
        credibility:int,
        votingweightage:int,
        truth_stake:tez
    };
    const interest:int=2;
    const minimum_truth_stake:tez =200tez;
    const companywallet: address="tz2GAUtthZfvCv6dRCwsxpB4pt1grWuXXZST" as address;
    

    @entry
    const add_truth_stake = (truth_stake:tez,user: user): [list<operation>, user] => {
        return[[], {...user, truth_stake: user.truth_stake + truth_stake}];
    } 

    //Calculating the credibility of user after a day 
    const credibilityCalculator=(user:user,trueUpvotes:int,falseUpvotes:int,trueDownvotes:int,falseDownvotes:int,validatedposts:int,unvalidatedposts:int):[list<operation>,user]=>{
            let credibilityTotal:int=0;
           
            credibilityTotal=credibilityTotal+(((1/10)*(trueUpvotes+trueDownvotes))+((-3/10)*(falseUpvotes+falseDownvotes)));
            credibilityTotal=credibilityTotal+(((1/2)*(validatedposts))+((-1/2)*(unvalidatedposts)));
            

            //Daily credibility cap is at 20
            if(credibilityTotal>=20){
                credibilityTotal=20
            }else{
                credibilityTotal=credibilityTotal
            }
            return[[], {...user,credibility:user.credibility+credibilityTotal}];

    }; 

    @entry
    const votingweightage=(_u:unit,user: user):[list<operation>,user] => {
    let updatedWeightage=1;

    //Weightage for credibility for the low credibility
    if (user.credibility < 35 && user.credibility>26) {
        updatedWeightage=(user.credibility-25) / 10;  // For every 0.1 score deducted, decrease by 0.1 (credibility * 10)
    }
    // Weightage for credibility between 5 and 9.5 (weightage = 1)
    else if (user.credibility <= 95) {
        updatedWeightage=1;  // Fixed weightage of 1
    }
    // Weightage for credibility between 9.6 and 10
    else if (user.credibility == 96) {
        updatedWeightage= 11/10 ; // 1.1 weightage
    } else if (user.credibility == 97) {
        updatedWeightage= 12/10 ; // 1.2 weightage
    } else if (user.credibility == 98) {
        updatedWeightage=13/10; // 1.3 weightage
    } else if (user.credibility == 99) {
        updatedWeightage=14/10; // 1.4 weightage
    } else {
        updatedWeightage=15/10; // 1.5 weightage 
    }
        return [[],{...user,votingweightage: updatedWeightage}];
    };
     

    //Calculate the truth_stake interest to be paid to the user after a day
    @entry
    const truth_stake_return=(_unit:unit,user:user):[list<operation>,user] => {
        //initiate the fund as 0, to be updated after calculation
        let updatedtruth_stake:tez=0tez;
        let interest:nat=((7n/100n)/365n);

        //to ensure the person is a validator and his/her credibility is more that 95, which is part of the eligibility to be paid
        while(user.credibility>95 && user.truth_stake>200tez){
            const daily_return:tez=user.truth_stake*interest;
            updatedtruth_stake=user.truth_stake+daily_return;
        }
        return [[],{...user, truth_stake:updatedtruth_stake}];
    };
        // pay truth_stake*(a percentage) (7/365)
};